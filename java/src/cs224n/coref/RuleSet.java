package cs224n.coref;

import java.util.*;
/*
 * This class abstract a single pass of running the rule based coreference system
 * Each instance of this class contains a set of rules that generate a candidate clustering
 * There are also a set of filters that are used to filter out some of the coreferences generated by the rules 
 */

public class RuleSet{
	
	private List<Rule> rules;
	private List<Filter> filters;
	
	public RuleSet(List<Rule> rules,List<Filter> filters){
		this.rules = rules;
		this.filters = filters;
	}
	
	public Map<Mention,HashSet<Mention>> apply(Document doc){
		
		Map<Mention,HashSet<Mention>> clusters = new HashMap<Mention, HashSet<Mention>>();
		for(Rule r : this.rules){
			Map<Mention,HashSet<Mention>> current = r.getCoreferences(doc);
			for(Mention m: current.keySet()){
				if(clusters.containsKey(m)){
					clusters.get(m).addAll(current.get(m));
				}
				else{
					clusters.put(m, current.get(m));
				}
			}
		}

		for(Filter f : this.filters){
			clusters = f.filter(clusters,doc);
		}
		return clusters;
	}
	
	
}